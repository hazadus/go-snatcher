// Package player —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–¥–µ–ª—å —ç–∫—Ä–∞–Ω–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è TUI
package player

import (
	"fmt"

	"github.com/charmbracelet/bubbles/progress"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/hazadus/go-snatcher/internal/data"
	"github.com/hazadus/go-snatcher/internal/player"
	"github.com/hazadus/go-snatcher/internal/utils"
)

var (
	titleStyle = lipgloss.NewStyle().
			Bold(true).
			Foreground(lipgloss.Color("#0000ff")).
			MarginBottom(1)

	trackInfoStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#888888")).
			MarginBottom(1)

	statusStyle = lipgloss.NewStyle().
			Bold(true).
			MarginTop(1).
			MarginBottom(1)

	controlsStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#666666")).
			MarginTop(1)

	errorStyle = lipgloss.NewStyle().
			Foreground(lipgloss.Color("#ff0000")).
			Bold(true)
)

// GoBackMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
type GoBackMsg struct{}

// ProgressMsg —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
type ProgressMsg struct {
	Status player.Status
}

// PlaybackFinishedMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
type PlaybackFinishedMsg struct{}

// PlaybackErrorMsg –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
type PlaybackErrorMsg struct {
	Error error
}

// Model –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å —ç–∫—Ä–∞–Ω–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
type Model struct {
	track       data.TrackMetadata
	player      *player.Player
	progressBar progress.Model
	status      player.Status
	isPlaying   bool
	error       error
	width       int
	height      int
}

// NewModel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–ª–µ–µ—Ä–∞
func NewModel(track data.TrackMetadata) *Model {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	prog := progress.New(progress.WithDefaultGradient())
	prog.Width = 40

	return &Model{
		track:       track,
		player:      player.NewPlayer(),
		progressBar: prog,
		isPlaying:   false,
	}
}

// NewModelWithPlayer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –ø–ª–µ–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–µ–µ—Ä–∞
func NewModelWithPlayer(track data.TrackMetadata, existingPlayer *player.Player) *Model {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	prog := progress.New(progress.WithDefaultGradient())
	prog.Width = 40

	return &Model{
		track:       track,
		player:      existingPlayer,
		progressBar: prog,
		isPlaying:   false,
	}
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
func (m *Model) Init() tea.Cmd {
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	return tea.Batch(
		m.startPlayback(),
		m.listenForProgress(),
	)
}

// Update –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å
func (m *Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.width = msg.Width
		m.height = msg.Height
		// –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
		m.progressBar.Width = min(60, msg.Width-10)
		return m, nil

	case tea.KeyMsg:
		switch msg.String() {
		case "q", "esc":
			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–µ–∫–æ–≤
			m.player.Stop()
			return m, func() tea.Msg {
				return GoBackMsg{}
			}

		case " ":
			// –ü–∞—É–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
			m.player.Pause()
			m.isPlaying = !m.isPlaying
			return m, nil
		}

	case ProgressMsg:
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		m.status = msg.Status
		m.isPlaying = msg.Status.IsPlaying

		// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
		var percent float64
		if msg.Status.Total > 0 {
			percent = float64(msg.Status.Current) / float64(msg.Status.Total)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
		return m, tea.Batch(
			m.progressBar.SetPercent(percent),
			m.listenForProgress(),
		)

	case PlaybackFinishedMsg:
		// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
		m.isPlaying = false
		return m, func() tea.Msg {
			return GoBackMsg{}
		}

	case PlaybackErrorMsg:
		// –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
		m.error = msg.Error
		m.isPlaying = false
		return m, nil

	case progress.FrameMsg:
		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
		progressModel, cmd := m.progressBar.Update(msg)
		m.progressBar = progressModel.(progress.Model)
		return m, cmd
	}

	return m, nil
}

// View –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–µ–ª—å
func (m *Model) View() string {
	if m.error != nil {
		return fmt.Sprintf(
			"%s\n\n%s\n\n%s",
			titleStyle.Render("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"),
			errorStyle.Render(m.error.Error()),
			controlsStyle.Render("–ù–∞–∂–º–∏—Ç–µ 'q' –∏–ª–∏ 'esc' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"),
		)
	}

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	title := titleStyle.Render("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
	trackInfo := trackInfoStyle.Render(fmt.Sprintf(
		"üé§ %s\nüéµ %s\nüíø %s",
		m.track.Artist,
		m.track.Title,
		m.track.Album,
	))

	// –°—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	var statusIcon string
	if m.isPlaying {
		statusIcon = "‚ñ∂Ô∏è"
	} else {
		statusIcon = "‚è∏Ô∏è"
	}

	statusText := statusStyle.Render(fmt.Sprintf("%s %s", statusIcon, formatStatus(m.isPlaying)))

	// –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
	progressView := m.progressBar.View()

	// –í—Ä–µ–º—è
	timeText := fmt.Sprintf(
		"%s / %s",
		utils.FormatDuration(m.status.Current),
		utils.FormatDuration(m.status.Total),
	)

	// –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	controls := controlsStyle.Render(
		"–ü—Ä–æ–±–µ–ª: –ø–∞—É–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ‚Ä¢ q/esc: –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
	)

	return fmt.Sprintf(
		"%s\n\n%s\n\n%s\n\n%s\n%s\n\n%s",
		title,
		trackInfo,
		statusText,
		progressView,
		timeText,
		controls,
	)
}

// Close –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –º–æ–¥–µ–ª–∏
func (m *Model) Close() error {
	if m.player != nil {
		return m.player.Close()
	}
	return nil
}

// startPlayback –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
func (m *Model) startPlayback() tea.Cmd {
	return func() tea.Msg {
		err := m.player.Play(&m.track)
		if err != nil {
			return PlaybackErrorMsg{Error: err}
		}
		m.isPlaying = true
		return nil
	}
}

// listenForProgress —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç –ø–ª–µ–µ—Ä–∞
func (m *Model) listenForProgress() tea.Cmd {
	return func() tea.Msg {
		select {
		case status, ok := <-m.player.Progress():
			if !ok {
				return PlaybackFinishedMsg{}
			}
			return ProgressMsg{Status: status}

		case _, ok := <-m.player.Done():
			if !ok {
				return PlaybackFinishedMsg{}
			}
			return PlaybackFinishedMsg{}
		}
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

func formatStatus(isPlaying bool) string {
	if isPlaying {
		return "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
	}
	return "–ü–∞—É–∑–∞"
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}
