package main

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
	"strings"

	"github.com/spf13/cobra"

	"github.com/hazadus/go-snatcher/internal/s3"
)

// createDeleteCommand —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É delete —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (app *Application) createDeleteCommand(ctx context.Context) *cobra.Command {
	return &cobra.Command{
		Use:   "delete [id]",
		Short: "Delete a track by ID",
		Long:  `Delete a track from both S3 storage and local data by its ID.`,
		Args:  cobra.ExactArgs(1),
		Run: func(_ *cobra.Command, args []string) {
			id, err := strconv.Atoi(args[0])
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID '%s'. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n", args[0])
				return
			}
			app.deleteTrack(ctx, id)
		},
	}
}

func (app *Application) deleteTrack(ctx context.Context, id int) {
	// –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ ID
	track, err := app.Data.TrackByID(id)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	fmt.Printf("üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫: %s - %s\n", track.Artist, track.Title)

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3, –µ—Å–ª–∏ –µ—Å—Ç—å URL
	if track.URL != "" {
		if err := app.deleteFromS3(ctx, track.URL); err != nil {
			fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑ S3: %v\n", err)
			// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ S3
		} else {
			fmt.Println("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ S3")
		}
	}

	// –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if err := app.Data.DeleteTrackByID(id); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if err := app.SaveData(); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	fmt.Println("‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
}

func (app *Application) deleteFromS3(ctx context.Context, fileURL string) error {
	// –°–æ–∑–¥–∞–µ–º S3 uploader
	s3Config := &s3.Config{
		Region:     app.Config.AwsRegion,
		AccessKey:  app.Config.AwsAccessKey,
		SecretKey:  app.Config.AwsSecretKey,
		Endpoint:   app.Config.AwsEndpoint,
		BucketName: app.Config.AwsBucketName,
	}

	uploader, err := s3.NewUploader(s3Config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –∏–∑ URL
	key, err := extractKeyFromURL(fileURL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ URL: %w", err)
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ S3
	return uploader.DeleteFile(ctx, key)
}

// extractKeyFromURL –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á —Ñ–∞–π–ª–∞ –∏–∑ URL S3
func extractKeyFromURL(fileURL string) (string, error) {
	parsedURL, err := url.Parse(fileURL)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π URL: %w", err)
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ª–µ—à–∞ –∏ —É–¥–∞–ª—è–µ–º bucket name
	pathSegments := strings.TrimPrefix(parsedURL.Path, "/")

	// URL –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: endpoint/bucket/key
	// –ù–∞–º –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—å–∫–æ key (–≤—Å–µ –ø–æ—Å–ª–µ bucket name)
	parts := strings.SplitN(pathSegments, "/", 2)
	if len(parts) < 2 {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL S3")
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –ø–æ—Å–ª–µ bucket name
	return parts[1], nil
}
