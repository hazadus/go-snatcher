package main

import (
	"bytes"
	"context"
	"io"
	"os"
	"strings"
	"testing"

	"github.com/hazadus/go-snatcher/internal/config"
	"github.com/hazadus/go-snatcher/internal/data"
)

// captureOutput –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç stdout –∏ stderr –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
func captureOutput(t *testing.T, fn func()) string {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ stdout –∏ stderr
	oldStdout := os.Stdout
	oldStderr := os.Stderr

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞
	r, w, err := os.Pipe()
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipe: %v", err)
	}

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stdout –∏ stderr
	os.Stdout = w
	os.Stderr = w

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	fn()

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ stdout –∏ stderr
	os.Stdout = oldStdout
	os.Stderr = oldStderr

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º writer
	w.Close()

	// –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	var buf bytes.Buffer
	if _, err := io.Copy(&buf, r); err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
	}

	return buf.String()
}

// TestCmdList –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `list` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
func TestCmdList(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –≤ –¥–∞–Ω–Ω—ã–µ
	testTrack := data.TrackMetadata{
		Artist:   "Test Artist",
		Title:    "Test Title",
		Album:    "Test Album",
		Length:   180,
		FileSize: 1024000,
		URL:      "https://s3.example.com/test.mp3",
	}
	app.Data.AddTrack(testTrack)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É list
	listCmd := app.createListCommand()

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		listCmd.SetArgs([]string{})
		err := listCmd.Execute()
		if err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã list: %v", err)
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥
	expectedStrings := []string{
		"üìö –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: 1",
		"Test Artist",
		"Test Title",
		"Test Album",
	}

	for _, expected := range expectedStrings {
		if !strings.Contains(output, expected) {
			t.Errorf("–í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã list –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É '%s': %s", expected, output)
		}
	}
}

// TestCmdListEmpty –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `list` –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—É—Å—Ç—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
func TestCmdListEmpty(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	app := createTestApplication(t, tempDir)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É list
	listCmd := app.createListCommand()

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		listCmd.SetArgs([]string{})
		err := listCmd.Execute()
		if err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã list: %v", err)
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –ø—É—Å—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
	if !strings.Contains(output, "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ list –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: %s", output)
	}
}

// TestCmdDelete –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `delete` —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫
func TestCmdDelete(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–∫–∏
	testTrack1 := data.TrackMetadata{
		Artist: "Artist 1",
		Title:  "Title 1",
		URL:    "https://s3.example.com/test1.mp3",
	}
	testTrack2 := data.TrackMetadata{
		Artist: "Artist 2",
		Title:  "Title 2",
		URL:    "https://s3.example.com/test2.mp3",
	}

	app.Data.AddTrack(testTrack1)
	app.Data.AddTrack(testTrack2)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
	if len(app.Data.Tracks) != 2 {
		t.Fatalf("–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Ç—Ä–µ–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ %d", len(app.Data.Tracks))
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É delete
	ctx := context.Background()
	deleteCmd := app.createDeleteCommand(ctx)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		deleteCmd.SetArgs([]string{"1"})
		err := deleteCmd.Execute()
		if err != nil {
			t.Errorf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã delete: %v", err)
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥
	if !strings.Contains(output, "üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Ç—Ä–µ–∫: Artist 1 - Title 1") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ delete –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: %s", output)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–∫ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –¥–∞–Ω–Ω—ã—Ö
	if len(app.Data.Tracks) != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è 1 —Ç—Ä–µ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–æ %d", len(app.Data.Tracks))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç—Ä–µ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
	remainingTrack := app.Data.Tracks[0]
	if remainingTrack.Artist != "Artist 2" {
		t.Errorf("–û–∂–∏–¥–∞–ª—Å—è Artist: Artist 2, –ø–æ–ª—É—á–µ–Ω–æ: %s", remainingTrack.Artist)
	}
}

// TestCmdDeleteInvalidID –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID –≤ –∫–æ–º–∞–Ω–¥–µ delete
func TestCmdDeleteInvalidID(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É delete
	ctx := context.Background()
	deleteCmd := app.createDeleteCommand(ctx)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		deleteCmd.SetArgs([]string{"invalid"})
		err := deleteCmd.Execute()
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ID)
		if err != nil {
			t.Errorf("–ö–æ–º–∞–Ω–¥–∞ delete –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º ID: %v", err)
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –æ–± –æ—à–∏–±–∫–µ
	if !strings.Contains(output, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ delete –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ ID: %s", output)
	}
}

// TestCmdDownload –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `download` –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
func TestCmdDownload(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É download
	ctx := context.Background()
	downloadCmd := app.createDownloadCommand(ctx)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		downloadCmd.SetArgs([]string{"https://www.youtube.com/watch?v=dQw4w9WgXcQ"})
		err := downloadCmd.Execute()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if err != nil {
			// –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —É–¥–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
			// –ù–æ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL
			if !strings.Contains(err.Error(), "youtube") && !strings.Contains(err.Error(), "network") {
				t.Errorf("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã download: %v", err)
			}
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—ã—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL
	if !strings.Contains(output, "–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –≤–∏–¥–µ–æ ID: dQw4w9WgXcQ") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ download –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: %s", output)
	}
}

// TestCmdDownloadInvalidURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ URL –≤ –∫–æ–º–∞–Ω–¥–µ download
func TestCmdDownloadInvalidURL(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É download
	ctx := context.Background()
	downloadCmd := app.createDownloadCommand(ctx)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é captureOutput
	output := captureOutput(t, func() {
		downloadCmd.SetArgs([]string{"invalid-url"})
		err := downloadCmd.Execute()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		if err == nil {
			t.Error("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã download —Å –Ω–µ–≤–µ—Ä–Ω—ã–º URL")
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º URL –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º –≤–∏–¥–µ–æ
		if !strings.Contains(err.Error(), "–æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ") &&
			!strings.Contains(err.Error(), "This video is unavailable") {
			t.Errorf("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã download: %v", err)
		}
	})

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—ã—Ç–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL
	if !strings.Contains(output, "–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –≤–∏–¥–µ–æ ID: invalid-url") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ download –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥: %s", output)
	}
}

// createTestApplication —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
func createTestApplication(t *testing.T, tempDir string) *Application {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	testConfig := &config.Config{
		AwsRegion:     "us-east-1",
		AwsAccessKey:  "test-key",
		AwsSecretKey:  "test-secret",
		AwsEndpoint:   "http://localhost:9000",
		AwsBucketName: "test-bucket",
		DownloadDir:   tempDir,
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	testData := data.NewAppData()

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := &Application{
		Config: testConfig,
		Data:   testData,
	}

	return app
}

// TestCmdAddInvalidArgs –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ add
func TestCmdAddInvalidArgs(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	tempDir := t.TempDir()

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	app := createTestApplication(t, tempDir)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É add
	ctx := context.Background()
	addCmd := app.createAddCommand(ctx)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
	var buf bytes.Buffer
	addCmd.SetOut(&buf)
	addCmd.SetErr(&buf)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	err := addCmd.Execute()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—à–∏–±–∫—É –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
	if err == nil {
		t.Error("–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã add –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥ –æ–± –æ—à–∏–±–∫–µ
	output := buf.String()
	if !strings.Contains(output, "requires exactly 1 arg") && !strings.Contains(output, "accepts 1 arg") {
		t.Errorf("–ö–æ–º–∞–Ω–¥–∞ add –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞ –æ—à–∏–±–∫—É –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö: %s", output)
	}
}
