// Package main - snatcher CLI tool
package main

import (
	"context"
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/hazadus/go-snatcher/internal/config"
	"github.com/hazadus/go-snatcher/internal/data"
	"github.com/spf13/cobra"
)

const (
	defaultConfigPath   = "~/.snatcher"
	defaultDataFilePath = "~/.snatcher_data"
)

// Application —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Application struct {
	Config *config.Config
	Data   *data.AppData
}

// NewApplication —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func NewApplication() *Application {
	return &Application{}
}

// Initialize –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–∞–Ω–Ω—ã–µ
func (app *Application) Initialize() error {
	var err error

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	if app.Config, err = config.LoadConfig(defaultConfigPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %w", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	app.Data = data.NewAppData()
	if err := app.Data.LoadData(defaultDataFilePath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %w", err)
	}

	return nil
}

// SaveData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (app *Application) SaveData() error {
	return app.Data.SaveData(defaultDataFilePath)
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "–û—à–∏–±–∫–∞: %v\n", err)
		os.Exit(1)
	}
}

func run() error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	ctx, cancel := createContextWithSignalHandling()
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	app := NewApplication()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
	if err := app.Initialize(); err != nil {
		return err
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É
	rootCmd := app.createRootCommand(ctx)

	return rootCmd.Execute()
}

// createContextWithSignalHandling —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
func createContextWithSignalHandling() (context.Context, context.CancelFunc) {
	ctx, cancel := context.WithCancel(context.Background())

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
	go func() {
		<-sigChan
		fmt.Println("\nüö´ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏...")
		cancel()
	}()

	return ctx, cancel
}

// createRootCommand —Å–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞–º–∏
func (app *Application) createRootCommand(ctx context.Context) *cobra.Command {
	rootCmd := &cobra.Command{
		Use:   "snatcher",
		Short: "A simple command line tool to manage and play mp3 files",
		Long:  `A simple command line tool to manage and play mp3 files from local path or URL.`,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –Ω–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
	rootCmd.AddCommand(app.createAddCommand(ctx))
	rootCmd.AddCommand(app.createListCommand())
	rootCmd.AddCommand(app.createPlayCommand(ctx))
	rootCmd.AddCommand(app.createDownloadCommand(ctx))

	return rootCmd
}
