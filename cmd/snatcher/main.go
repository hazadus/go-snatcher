package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/dhowden/tag"
	"github.com/gopxl/beep"
	"github.com/gopxl/beep/mp3"
	"github.com/gopxl/beep/speaker"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "snatcher [mp3 file]",
	Short: "Play an mp3 file",
	Long:  `A simple command line tool to play mp3 files.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		play(args[0])
	},
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func main() {
	Execute()
}

func play(filepath string) {
	// –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ MP3 —Ñ–∞–π–ª–∞
	metadata := getMetadata(filepath)
	
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	f, err := os.Open(filepath)
	if err != nil {
		log.Fatal(err)
	}

	streamer, format, err := mp3.Decode(f)
	if err != nil {
		log.Fatal(err)
	}
	defer streamer.Close()

	err = speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	if err != nil {
		log.Fatal(err)
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", metadata.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", metadata.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", metadata.Album)
	fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", formatDuration(format.SampleRate.D(streamer.Len())))
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan bool)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go func() {
		ticker := time.NewTicker(time.Second)
		defer ticker.Stop()
		
		for {
			select {
			case <-done:
				return
			case <-ticker.C:
				speaker.Lock()
				currentPos := format.SampleRate.D(streamer.Position())
				totalLen := format.SampleRate.D(streamer.Len())
				speaker.Unlock()
				
				// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
				fmt.Printf("\r‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å: %s / %s", 
					formatDuration(currentPos), 
					formatDuration(totalLen))
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	<-done
	fmt.Println("\n‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
type TrackMetadata struct {
	Artist string
	Title  string
	Album  string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ MP3 —Ñ–∞–π–ª–∞
func getMetadata(filepath string) TrackMetadata {
	file, err := os.Open(filepath)
	if err != nil {
		return TrackMetadata{
			Artist: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
			Title:  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫",
			Album:  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º",
		}
	}
	defer file.Close()

	metadata, err := tag.ReadFrom(file)
	if err != nil {
		return TrackMetadata{
			Artist: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å",
			Title:  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫",
			Album:  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º",
		}
	}

	artist := metadata.Artist()
	title := metadata.Title()
	album := metadata.Album()

	// –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
	if title == "" {
		title = getFileNameWithoutExt(filepath)
	}

	return TrackMetadata{
		Artist: artist,
		Title:  title,
		Album:  album,
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
func formatDuration(d time.Duration) string {
	minutes := int(d.Minutes())
	seconds := int(d.Seconds()) % 60
	return fmt.Sprintf("%02d:%02d", minutes, seconds)
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
func getFileNameWithoutExt(filepath string) string {
	parts := strings.Split(filepath, "/")
	filename := parts[len(parts)-1]
	return strings.TrimSuffix(filename, ".mp3")
}