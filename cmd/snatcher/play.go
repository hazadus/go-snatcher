package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"strings"
	"time"

	"github.com/gopxl/beep"
	"github.com/gopxl/beep/mp3"
	"github.com/gopxl/beep/speaker"
	"github.com/spf13/cobra"
)

var rootCmd = &cobra.Command{
	Use:   "snatcher [mp3 file or URL]",
	Short: "Play an mp3 file from local path or URL",
	Long:  `A simple command line tool to play mp3 files from local path or URL.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		play(args[0])
	},
}

func play(source string) {
	var reader io.ReadCloser
	var err error
	var isURL bool

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
	if strings.HasPrefix(source, "http://") || strings.HasPrefix(source, "https://") {
		isURL = true
		fmt.Printf("üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ URL: %s\n", source)
		reader, err = downloadFromURL(source)
		if err != nil {
			log.Fatal(err)
		}
		defer reader.Close()
	} else {
		isURL = false
		reader, err = os.Open(source)
		if err != nil {
			log.Fatal(err)
		}
		defer reader.Close()
	}

	// –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ MP3 —Ñ–∞–π–ª–∞
	metadata := getMetadataFromReader(reader, source)

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ reader –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
	if seeker, ok := reader.(io.ReadSeeker); ok {
		if _, err := seeker.Seek(0, 0); err != nil {
			log.Printf("Seek error: %v", err)
			return // –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ main handler
		}
	} else {
		// –ï—Å–ª–∏ reader –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç seek, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π reader
		if isURL {
			reader.Close()
			reader, err = downloadFromURL(source)
			if err != nil {
				log.Fatal(err)
			}
			defer reader.Close()
		} else {
			reader.Close()
			reader, err = os.Open(source)
			if err != nil {
				log.Fatal(err)
			}
			defer reader.Close()
		}
	}

	streamer, format, err := mp3.Decode(reader)
	if err != nil {
		log.Fatal(err)
	}
	defer streamer.Close()

	err = speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	if err != nil {
		log.Fatal(err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
	duration := format.SampleRate.D(streamer.Len())

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", metadata.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", metadata.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", metadata.Album)
	fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", formatDuration(duration))
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan bool)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go func() {
		ticker := time.NewTicker(time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-done:
				return
			case <-ticker.C:
				speaker.Lock()
				currentPos := format.SampleRate.D(streamer.Position())
				totalLen := format.SampleRate.D(streamer.Len())
				speaker.Unlock()

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
				if totalLen > 0 {
					// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
					fmt.Printf("\r‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å: %s / %s",
						formatDuration(currentPos),
						formatDuration(totalLen))
				} else {
					// –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
					fmt.Printf("\r‚è±Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: %s",
						formatDuration(currentPos))
				}
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	<-done
	fmt.Println("\n‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}
