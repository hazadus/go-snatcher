package main

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/gopxl/beep"
	"github.com/gopxl/beep/mp3"
	"github.com/gopxl/beep/speaker"
	"github.com/spf13/cobra"
)

// createPlayCommand —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É play —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (app *Application) createPlayCommand(ctx context.Context) *cobra.Command {
	return &cobra.Command{
		Use:   "play [trackid]",
		Short: "Play a track by its ID",
		Long:  `Play an mp3 file by its track ID from the app data.`,
		Args:  cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			trackID, err := strconv.Atoi(args[0])
			if err != nil {
				return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–∫–∞: %s", args[0])
			}
			return app.playByID(ctx, trackID)
		},
	}
}

// enableRawMode –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º raw –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ echo)
func enableRawMode() *exec.Cmd {
	cmd := exec.Command("stty", "-echo", "-icanon")
	cmd.Stdin = os.Stdin
	_ = cmd.Run() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞
	return cmd
}

// disableRawMode –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
func disableRawMode() {
	cmd := exec.Command("stty", "echo", "icanon")
	cmd.Stdin = os.Stdin
	_ = cmd.Run() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞
}

// readSingleChar —á–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è Enter
func readSingleChar() (byte, error) {
	buffer := make([]byte, 1)
	_, err := os.Stdin.Read(buffer)
	return buffer[0], err
}

func (app *Application) playByID(ctx context.Context, trackID int) error {
	// –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ ID
	track, err := app.Data.TrackByID(trackID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞: %w", err)
	}

	if track == nil {
		return fmt.Errorf("—Ç—Ä–µ–∫ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", trackID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å URL
	if track.URL == "" {
		return fmt.Errorf("—É —Ç—Ä–µ–∫–∞ —Å ID %d –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL", trackID)
	}

	fmt.Printf("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ ID %d: %s - %s\n", trackID, track.Artist, track.Title)

	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   ID: %d\n", track.ID)
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", track.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", track.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", track.Album)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–∏–¥–µ—Ä —Å –±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	const bufferSize = 256 * 1024 // 256KB –±—É—Ñ–µ—Ä –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
	streamReader, err := NewStreamingReader(ctx, track.URL, bufferSize)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–∏–¥–µ—Ä–∞: %w", err)
	}
	defer streamReader.Close()

	fmt.Printf("üåê –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...\n")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º MP3 –ø–æ—Ç–æ–∫–æ–≤–æ –∏–∑ –Ω–∞—à–µ–≥–æ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∏–¥–µ—Ä–∞
	streamer, format, err := mp3.Decode(streamReader)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è MP3: %w", err)
	}
	defer streamer.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º speaker —Å –±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	err = speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/5)) // 200ms –±—É—Ñ–µ—Ä
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	var duration time.Duration
	if track.Length > 0 {
		duration = time.Duration(track.Length) * time.Second
		fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", formatDuration(duration))
	} else {
		fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...\n")
	}
	fmt.Printf("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: %d KB\n", bufferSize/1024)
	fmt.Printf("   –ö–∞—á–µ—Å—Ç–≤–æ: %d-bit, %d Hz, %d –∫–∞–Ω–∞–ª–æ–≤\n", format.Precision, format.SampleRate, format.NumChannels)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan bool)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–∞—É–∑—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
	ctrl := &beep.Ctrl{
		Streamer: streamer,
		Paused:   false,
	}
	var isPaused bool                                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	var currentStreamer beep.StreamSeekCloser = streamer // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ streamer

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—É–∑—ã
	speaker.Play(beep.Seq(ctrl, beep.Callback(func() {
		done <- true
	})))

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	fmt.Printf("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n")
	fmt.Printf("   [–ü—Ä–æ–±–µ–ª] - –ø–∞—É–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n")
	fmt.Printf("   [Ctrl+C] - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏\n")
	fmt.Println()

	// –í–∫–ª—é—á–∞–µ–º raw —Ä–µ–∂–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª–∞–≤–∏—à
	enableRawMode()
	defer disableRawMode() // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
	go func() {
		for {
			char, err := readSingleChar()
			if err != nil {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª (ASCII 32) –∏–ª–∏ Enter (ASCII 10/13)
			if char == 32 || char == 10 || char == 13 {
				speaker.Lock()
				isPaused = !isPaused
				ctrl.Paused = isPaused
				speaker.Unlock()

				// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				fmt.Printf("\r\033[K") // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
				if isPaused {
					fmt.Printf("‚è∏Ô∏è  –ü–∞—É–∑–∞\n")
				} else {
					fmt.Printf("‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n")
				}
			}
		}
	}()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	go func() {
		ticker := time.NewTicker(time.Second)
		defer ticker.Stop()

		startTime := time.Now()
		lastPosition := int64(0)
		stuckCount := 0
		pausedTime := time.Duration(0)
		lastPausedState := false

		for {
			select {
			case <-done:
				return
			case <-ticker.C:
				speaker.Lock()
				currentPos := format.SampleRate.D(currentStreamer.Position())
				totalLen := format.SampleRate.D(currentStreamer.Len())
				currentPauseState := isPaused
				speaker.Unlock()

				// –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–∞—É–∑—ã
				if currentPauseState && !lastPausedState {
					// –ù–∞—á–∞–ª–æ –ø–∞—É–∑—ã
					pausedTime = time.Since(startTime) - currentPos
				}
				lastPausedState = currentPauseState

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –ª–∏ –ø–æ—Ç–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ)
				currentPosInt := int64(currentPos)
				if !currentPauseState {
					if currentPosInt == lastPosition {
						stuckCount++
						if stuckCount > 5 { // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥
							fmt.Printf("\n‚ö†Ô∏è  –ü–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∑–∏—Ü–∏—è: %s\n", formatDuration(currentPos))
						}
					} else {
						stuckCount = 0
					}
				} else {
					stuckCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø–∞—É–∑–µ
				}
				lastPosition = currentPosInt

				// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
				elapsed := time.Since(startTime) - pausedTime
				var speed float64
				if elapsed > 0 && !currentPauseState {
					speed = float64(currentPos) / float64(elapsed)
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
				var progress string
				if track.Length > 0 && duration > 0 {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
					percent := float64(currentPos) / float64(duration) * 100
					progress = fmt.Sprintf("%.1f%%", percent)
				} else if totalLen > 0 {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
					percent := float64(currentPos) / float64(totalLen) * 100
					progress = fmt.Sprintf("%.1f%%", percent)
				} else {
					progress = "??%"
				}

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
				if totalLen > 0 || duration > 0 {
					totalDur := duration
					if totalDur == 0 {
						totalDur = totalLen
					}

					statusIcon := "‚è±Ô∏è"
					statusText := getStreamStatus(stuckCount)

					if currentPauseState {
						statusIcon = "‚è∏Ô∏è"
						statusText = "–ù–∞ –ø–∞—É–∑–µ"
					} else if stuckCount > 3 {
						statusIcon = "‚ö†Ô∏è"
					} else if speed >= 0.98 && speed <= 1.02 {
						statusIcon = "‚úÖ"
					}

					if currentPauseState {
						fmt.Printf("\r%s  %s | %s / %s | –°—Ç–∞—Ç—É—Å: %s",
							statusIcon,
							progress,
							formatDuration(currentPos),
							formatDuration(totalDur),
							statusText)
					} else {
						fmt.Printf("\r%s  %s | %s / %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –°—Ç–∞—Ç—É—Å: %s",
							statusIcon,
							progress,
							formatDuration(currentPos),
							formatDuration(totalDur),
							speed,
							statusText)
					}
				} else {
					if currentPauseState {
						fmt.Printf("\r‚è∏Ô∏è  %s | –°—Ç–∞—Ç—É—Å: –ù–∞ –ø–∞—É–∑–µ | –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
							formatDuration(currentPos))
					} else {
						fmt.Printf("\r‚è±Ô∏è  %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
							formatDuration(currentPos),
							speed)
					}
				}
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	select {
	case <-done:
		fmt.Println("\n‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
	case <-interrupt:
		fmt.Println("\n‚èπÔ∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
		speaker.Clear() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	case <-ctx.Done():
		fmt.Println("\nüö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
		speaker.Clear() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
		return ctx.Err()
	}

	return nil
}
