package main

import (
	"context"
	"fmt"
	"os"
	"os/exec"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/spf13/cobra"

	"github.com/hazadus/go-snatcher/internal/player"
	"github.com/hazadus/go-snatcher/internal/streaming"
	"github.com/hazadus/go-snatcher/internal/utils"
)

// createPlayCommand —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É play —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (app *Application) createPlayCommand(ctx context.Context) *cobra.Command {
	return &cobra.Command{
		Use:   "play [trackid]",
		Short: "Play a track by its ID",
		Long:  `Play an mp3 file by its track ID from the app data.`,
		Args:  cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			trackID, err := strconv.Atoi(args[0])
			if err != nil {
				return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–∫–∞: %s", args[0])
			}
			return app.playByID(ctx, trackID)
		},
	}
}

// enableRawMode –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º raw –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏ echo)
func enableRawMode() *exec.Cmd {
	cmd := exec.Command("stty", "-echo", "-icanon")
	cmd.Stdin = os.Stdin
	_ = cmd.Run() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞
	return cmd
}

// disableRawMode –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
func disableRawMode() {
	cmd := exec.Command("stty", "echo", "icanon")
	cmd.Stdin = os.Stdin
	_ = cmd.Run() // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–µ–µ—Ä–∞
}

// readSingleChar —á–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è Enter
func readSingleChar() (byte, error) {
	buffer := make([]byte, 1)
	_, err := os.Stdin.Read(buffer)
	return buffer[0], err
}

func (app *Application) playByID(ctx context.Context, trackID int) error {
	// –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ ID
	track, err := app.Data.TrackByID(trackID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞: %w", err)
	}

	if track == nil {
		return fmt.Errorf("—Ç—Ä–µ–∫ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", trackID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å URL
	if track.URL == "" {
		return fmt.Errorf("—É —Ç—Ä–µ–∫–∞ —Å ID %d –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL", trackID)
	}

	fmt.Printf("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ ID %d: %s - %s\n", trackID, track.Artist, track.Title)
	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   ID: %d\n", track.ID)
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", track.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", track.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", track.Album)
	if track.Length > 0 {
		duration := utils.FormatDuration(time.Duration(track.Length) * time.Second)
		fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", duration)
	}
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä
	p := player.NewPlayer()
	defer p.Close()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	err = p.Play(track)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: %w", err)
	}

	fmt.Printf("üåê –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...\n")
	fmt.Printf("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n")
	fmt.Printf("   [–ü—Ä–æ–±–µ–ª] - –ø–∞—É–∑–∞/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n")
	fmt.Printf("   [Ctrl+C] - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏\n")
	fmt.Println()

	// –í–∫–ª—é—á–∞–µ–º raw —Ä–µ–∂–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª–∞–≤–∏—à
	enableRawMode()
	defer disableRawMode()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞–≤–∏—à
	go func() {
		for {
			char, err := readSingleChar()
			if err != nil {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª (ASCII 32) –∏–ª–∏ Enter (ASCII 10/13)
			if char == 32 || char == 10 || char == 13 {
				p.Pause()
				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				fmt.Printf("\r\033[K") // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
				if p.IsPlaying() {
					fmt.Printf("‚ñ∂Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ\n")
				} else {
					fmt.Printf("‚è∏Ô∏è  –ü–∞—É–∑–∞\n")
				}
			}
		}
	}()

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
	for {
		select {
		case status := <-p.Progress():
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
			displayProgress(status)
		case <-p.Done():
			fmt.Println("\n‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
			return nil
		case <-interrupt:
			fmt.Println("\n‚èπÔ∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
			p.Stop()
			return nil
		case <-ctx.Done():
			fmt.Println("\nüö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
			p.Stop()
			return ctx.Err()
		}
	}
}

// displayProgress –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
func displayProgress(status player.Status) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	var progress string
	if status.Total > 0 {
		percent := float64(status.Current) / float64(status.Total) * 100
		progress = fmt.Sprintf("%.1f%%", percent)
	} else {
		progress = "??%"
	}

	// –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
	statusIcon := "‚è±Ô∏è"
	statusText := streaming.GetStreamStatus(status.StuckCount)

	if !status.IsPlaying {
		statusIcon = "‚è∏Ô∏è"
		statusText = "–ù–∞ –ø–∞—É–∑–µ"
	} else if status.StuckCount > 3 {
		statusIcon = "‚ö†Ô∏è"
	} else if status.Speed >= 0.98 && status.Speed <= 1.02 {
		statusIcon = "‚úÖ"
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	if status.Total > 0 {
		if !status.IsPlaying {
			fmt.Printf("\r%s  %s | %s / %s | –°—Ç–∞—Ç—É—Å: %s",
				statusIcon,
				progress,
				utils.FormatDuration(status.Current),
				utils.FormatDuration(status.Total),
				statusText)
		} else {
			fmt.Printf("\r%s  %s | %s / %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –°—Ç–∞—Ç—É—Å: %s",
				statusIcon,
				progress,
				utils.FormatDuration(status.Current),
				utils.FormatDuration(status.Total),
				status.Speed,
				statusText)
		}
	} else {
		if !status.IsPlaying {
			fmt.Printf("\r‚è∏Ô∏è  %s | –°—Ç–∞—Ç—É—Å: –ù–∞ –ø–∞—É–∑–µ | –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
				utils.FormatDuration(status.Current))
		} else {
			fmt.Printf("\r‚è±Ô∏è  %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
				utils.FormatDuration(status.Current),
				status.Speed)
		}
	}
}
