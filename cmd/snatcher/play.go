package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"strconv"
	"time"

	"github.com/gopxl/beep"
	"github.com/gopxl/beep/mp3"
	"github.com/gopxl/beep/speaker"
	"github.com/spf13/cobra"
)

var playCmd = &cobra.Command{
	Use:   "play [trackid]",
	Short: "Play a track by its ID",
	Long:  `Play an mp3 file by its track ID from the app data.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		trackID, err := strconv.Atoi(args[0])
		if err != nil {
			log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–∫–∞: %s", args[0])
		}
		playByID(trackID)
	},
}

func playByID(trackID int) {
	// –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ ID
	track, err := appData.TrackByID(trackID)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞: %v", err)
	}

	if track == nil {
		log.Fatalf("–¢—Ä–µ–∫ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", trackID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å URL
	if track.URL == "" {
		log.Fatalf("–£ —Ç—Ä–µ–∫–∞ —Å ID %d –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL", trackID)
	}

	fmt.Printf("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ ID %d: %s - %s\n", trackID, track.Artist, track.Title)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
	reader, err := downloadFromURL(track.URL)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer reader.Close()

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	tempFile, err := os.CreateTemp("", "snatcher-*.mp3")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}
	defer os.Remove(tempFile.Name())
	defer tempFile.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	_, err = io.Copy(tempFile, reader)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–∞–π–ª–µ
	if _, err := tempFile.Seek(0, 0); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª–µ: %v", err)
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º MP3
	streamer, format, err := mp3.Decode(tempFile)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è MP3: %v", err)
	}
	defer streamer.Close()

	err = speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
	duration := format.SampleRate.D(streamer.Len())

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   ID: %d\n", track.ID)
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", track.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", track.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", track.Album)
	fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", formatDuration(duration))
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan bool)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go func() {
		ticker := time.NewTicker(time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-done:
				return
			case <-ticker.C:
				speaker.Lock()
				currentPos := format.SampleRate.D(streamer.Position())
				totalLen := format.SampleRate.D(streamer.Len())
				speaker.Unlock()

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
				if totalLen > 0 {
					// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
					fmt.Printf("\r‚è±Ô∏è  –ü—Ä–æ–≥—Ä–µ—Å—Å: %s / %s",
						formatDuration(currentPos),
						formatDuration(totalLen))
				} else {
					// –ï—Å–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
					fmt.Printf("\r‚è±Ô∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: %s",
						formatDuration(currentPos))
				}
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	<-done
	fmt.Println("\n‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
}
