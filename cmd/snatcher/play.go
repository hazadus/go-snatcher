package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/gopxl/beep"
	"github.com/gopxl/beep/mp3"
	"github.com/gopxl/beep/speaker"
	"github.com/spf13/cobra"
)

var playCmd = &cobra.Command{
	Use:   "play [trackid]",
	Short: "Play a track by its ID",
	Long:  `Play an mp3 file by its track ID from the app data.`,
	Args:  cobra.ExactArgs(1),
	Run: func(_ *cobra.Command, args []string) {
		trackID, err := strconv.Atoi(args[0])
		if err != nil {
			log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–∫–∞: %s", args[0])
		}
		playByID(trackID)
	},
}

func playByID(trackID int) {
	// –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ –ø–æ ID
	track, err := appData.TrackByID(trackID)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞: %v", err)
	}

	if track == nil {
		log.Fatalf("–¢—Ä–µ–∫ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", trackID)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç—Ä–µ–∫–∞ –µ—Å—Ç—å URL
	if track.URL == "" {
		log.Fatalf("–£ —Ç—Ä–µ–∫–∞ —Å ID %d –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL", trackID)
	}

	fmt.Printf("üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫ ID %d: %s - %s\n", trackID, track.Artist, track.Title)

	fmt.Printf("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:\n")
	fmt.Printf("   ID: %d\n", track.ID)
	fmt.Printf("   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: %s\n", track.Artist)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", track.Title)
	fmt.Printf("   –ê–ª—å–±–æ–º: %s\n", track.Album)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–∏–¥–µ—Ä —Å –±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	const bufferSize = 256 * 1024 // 256KB –±—É—Ñ–µ—Ä –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
	streamReader, err := NewStreamingReader(track.URL, bufferSize)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–∏–¥–µ—Ä–∞: %v", err)
	}
	defer streamReader.Close()

	fmt.Printf("üåê –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...\n")

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º MP3 –ø–æ—Ç–æ–∫–æ–≤–æ –∏–∑ –Ω–∞—à–µ–≥–æ –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∏–¥–µ—Ä–∞
	streamer, format, err := mp3.Decode(streamReader)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è MP3: %v", err)
	}
	defer streamer.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º speaker —Å –±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	err = speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/5)) // 200ms –±—É—Ñ–µ—Ä
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	var duration time.Duration
	if track.Length > 0 {
		duration = time.Duration(track.Length) * time.Second
		fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %s\n", formatDuration(duration))
	} else {
		fmt.Printf("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è...\n")
	}
	fmt.Printf("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: %d KB\n", bufferSize/1024)
	fmt.Printf("   –ö–∞—á–µ—Å—Ç–≤–æ: %d-bit, %d Hz, %d –∫–∞–Ω–∞–ª–æ–≤\n", format.Precision, format.SampleRate, format.NumChannels)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	done := make(chan bool)

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	go func() {
		ticker := time.NewTicker(time.Second)
		defer ticker.Stop()

		startTime := time.Now()
		lastPosition := int64(0)
		stuckCount := 0

		for {
			select {
			case <-done:
				return
			case <-ticker.C:
				speaker.Lock()
				currentPos := format.SampleRate.D(streamer.Position())
				totalLen := format.SampleRate.D(streamer.Len())
				speaker.Unlock()

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Å—Ç—Ä—è–ª –ª–∏ –ø–æ—Ç–æ–∫
				currentPosInt := int64(currentPos)
				if currentPosInt == lastPosition {
					stuckCount++
					if stuckCount > 5 { // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥
						fmt.Printf("\n‚ö†Ô∏è  –ü–æ—Ç–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∑–∏—Ü–∏—è: %s\n", formatDuration(currentPos))
					}
				} else {
					stuckCount = 0
				}
				lastPosition = currentPosInt

				// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
				elapsed := time.Since(startTime)
				var speed float64
				if elapsed > 0 {
					speed = float64(currentPos) / float64(elapsed)
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
				var progress string
				if track.Length > 0 && duration > 0 {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
					percent := float64(currentPos) / float64(duration) * 100
					progress = fmt.Sprintf("%.1f%%", percent)
				} else if totalLen > 0 {
					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
					percent := float64(currentPos) / float64(totalLen) * 100
					progress = fmt.Sprintf("%.1f%%", percent)
				} else {
					progress = "??%"
				}

				// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
				if totalLen > 0 || duration > 0 {
					totalDur := duration
					if totalDur == 0 {
						totalDur = totalLen
					}

					statusIcon := "‚è±Ô∏è"
					if stuckCount > 3 {
						statusIcon = "‚ö†Ô∏è"
					} else if speed >= 0.98 && speed <= 1.02 {
						statusIcon = "‚úÖ"
					}

					fmt.Printf("\r%s  %s | %s / %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –°—Ç–∞—Ç—É—Å: %s",
						statusIcon,
						progress,
						formatDuration(currentPos),
						formatDuration(totalDur),
						speed,
						getStreamStatus(stuckCount))
				} else {
					fmt.Printf("\r‚è±Ô∏è  %s | –°–∫–æ—Ä–æ—Å—Ç—å: %.2fx | –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
						formatDuration(currentPos),
						speed)
				}
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
	select {
	case <-done:
		fmt.Println("\n‚úÖ –ü–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
	case <-interrupt:
		fmt.Println("\n‚èπÔ∏è  –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
		speaker.Clear() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
	}
}
