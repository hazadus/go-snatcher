package main

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
)

var listCmd = &cobra.Command{
	Use:   "list",
	Short: "List all tracks from the library",
	Long:  `Display a list of all tracks stored in the application data.`,
	Run: func(cmd *cobra.Command, args []string) {
		listTracks()
	},
}

func listTracks() {
	if len(appData.Tracks) == 0 {
		fmt.Println("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–µ–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã 'add'.")
		return
	}

	fmt.Printf("üìö –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: %d\n\n", len(appData.Tracks))

	// –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
	fmt.Printf("%-4s %-30s %-30s %-20s %-10s %-12s\n",
		"ID", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–ª—å–±–æ–º", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–†–∞–∑–º–µ—Ä")
	fmt.Println(strings.Repeat("-", 120))

	// –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫
	for _, track := range appData.Tracks {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
		duration := formatDurationFromSeconds(track.Length)
		if track.Length == 0 {
			duration = "N/A"
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
		fileSize := formatFileSize(track.FileSize)

		// –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		artist := truncateString(track.Artist, 28)
		title := truncateString(track.Title, 28)
		album := truncateString(track.Album, 18)

		fmt.Printf("%-4d %-30s %-30s %-20s %-10s %-12s\n",
			track.ID, artist, title, album, duration, fileSize)
	}

	fmt.Println()
	fmt.Println("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'snatcher play [ID]' –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Å—Ç—Ä–æ–∫–∏ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å–µ–∫—É–Ω–¥
func formatDurationFromSeconds(seconds int) string {
	if seconds == 0 {
		return "N/A"
	}

	minutes := seconds / 60
	remainingSeconds := seconds % 60
	return fmt.Sprintf("%02d:%02d", minutes, remainingSeconds)
}
