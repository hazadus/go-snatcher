package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/spf13/cobra"

	"github.com/hazadus/go-snatcher/internal/data"
)

var addCmd = &cobra.Command{
	Use:   "add [file path]",
	Short: "Upload an mp3 file to S3 storage",
	Long:  `Upload an mp3 file to S3 storage with progress tracking.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		uploadToS3(args[0])
	},
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3 —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func uploadToS3(filePath string) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		log.Fatalf("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	fileInfo, err := file.Stat()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %v", err)
	}
	fileSize := fileInfo.Size()

	// –°–æ–∑–¥–∞–µ–º AWS —Å–µ—Å—Å–∏—é
	awsConfig := &aws.Config{
		Region: aws.String(cfg.AwsRegion),
		Credentials: credentials.NewStaticCredentials(
			cfg.AwsAccessKey,
			cfg.AwsSecretKey,
			"",
		),
	}

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω endpoint, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
	if cfg.AwsEndpoint != "" {
		awsConfig.Endpoint = aws.String(cfg.AwsEndpoint)
		awsConfig.S3ForcePathStyle = aws.Bool(true)
	}

	sess, err := session.NewSession(awsConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AWS —Å–µ—Å—Å–∏–∏: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º S3 uploader
	uploader := s3manager.NewUploader(sess)

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∫–ª—é—á–∞ –≤ S3
	fileName := getFileNameWithoutExt(filePath)
	s3Key := fileName + ".mp3"

	fmt.Printf("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3:\n")
	fmt.Printf("   –§–∞–π–ª: %s\n", filePath)
	fmt.Printf("   –†–∞–∑–º–µ—Ä: %s\n", formatFileSize(fileSize))
	fmt.Printf("   –ë–∞–∫–µ—Ç: %s\n", cfg.AwsBucketName)
	fmt.Printf("   –ö–ª—é—á: %s\n", s3Key)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressChan := make(chan int64)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go func() {
		startTime := time.Now()

		for progress := range progressChan {
			if progress > 0 {
				elapsed := time.Since(startTime)
				percentage := float64(progress) / float64(fileSize) * 100

				// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
				speed := float64(progress) / elapsed.Seconds()

				// –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
				remainingBytes := fileSize - progress
				var remainingTime time.Duration
				if speed > 0 {
					remainingTime = time.Duration(float64(remainingBytes)/speed) * time.Second
				}

				// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
				fmt.Printf("\rüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%% | –°–∫–æ—Ä–æ—Å—Ç—å: %s/s | –ü—Ä–æ—à–ª–æ: %s | –û—Å—Ç–∞–ª–æ—Å—å: %s",
					percentage,
					formatFileSize(int64(speed)),
					formatDuration(elapsed),
					formatDuration(remainingTime))
			}
		}
	}()

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π reader –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressReader := &ProgressReader{
		Reader: file,
		Size:   fileSize,
		OnProgress: func(bytesRead int64) {
			progressChan <- bytesRead
		},
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
	_, err = uploader.Upload(&s3manager.UploadInput{
		Bucket: aws.String(cfg.AwsBucketName),
		Key:    aws.String(s3Key),
		Body:   progressReader,
	})

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	close(progressChan)

	if err != nil {
		fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3!\n")
	url := fmt.Sprintf("%s/%s/%s", cfg.AwsEndpoint, cfg.AwsBucketName, s3Key)
	fmt.Printf("   URL: %s\n", url)

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞
	fileForMeta, err := os.Open(filePath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer fileForMeta.Close()

	meta := getMetadataFromReader(fileForMeta, filePath)

	// –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞
	duration, err := getMP3Duration(filePath)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞: %v", err)
		duration = 0
	}

	track := data.TrackMetadata{
		Artist:   meta.Artist,
		Title:    meta.Title,
		Album:    meta.Album,
		Length:   int(duration.Seconds()),
		FileSize: fileSize,
		URL:      url,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫
	appData.AddTrack(track)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	if err := appData.SaveData(defaultDataFilePath); err != nil {
		fmt.Printf("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
	} else {
		fmt.Printf("\nüì¶ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ %s\n", defaultDataFilePath)
	}
}

// ProgressReader —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
type ProgressReader struct {
	io.Reader
	Size       int64
	OnProgress func(int64)
	bytesRead  int64
}

func (pr *ProgressReader) Read(p []byte) (n int, err error) {
	n, err = pr.Reader.Read(p)
	pr.bytesRead += int64(n)
	if pr.OnProgress != nil {
		pr.OnProgress(pr.bytesRead)
	}
	return n, err
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
func formatFileSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}
