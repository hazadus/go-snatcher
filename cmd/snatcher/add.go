package main

import (
	"context"
	"fmt"
	"time"

	"github.com/spf13/cobra"

	"github.com/hazadus/go-snatcher/internal/metadata"
	"github.com/hazadus/go-snatcher/internal/s3"
	"github.com/hazadus/go-snatcher/internal/uploader"
)

// createAddCommand —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É add —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (app *Application) createAddCommand(ctx context.Context) *cobra.Command {
	return &cobra.Command{
		Use:   "add [file path]",
		Short: "Upload an mp3 file to S3 storage",
		Long:  `Upload an mp3 file to S3 storage with progress tracking.`,
		Args:  cobra.ExactArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (10 –º–∏–Ω—É—Ç)
			uploadCtx, cancel := context.WithTimeout(ctx, 10*time.Minute)
			defer cancel()
			return app.uploadToS3(uploadCtx, args[0])
		},
	}
}

// uploadToS3 –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ S3 —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func (app *Application) uploadToS3(ctx context.Context, filePath string) error {
	// –°–æ–∑–¥–∞–µ–º S3 uploader
	s3Config := &s3.Config{
		Region:     app.Config.AwsRegion,
		AccessKey:  app.Config.AwsAccessKey,
		SecretKey:  app.Config.AwsSecretKey,
		Endpoint:   app.Config.AwsEndpoint,
		BucketName: app.Config.AwsBucketName,
	}

	s3Uploader, err := s3.NewUploader(s3Config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è S3 uploader: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏
	uploadService := uploader.NewService(s3Uploader, app.Data)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	metadataExtractor := metadata.NewExtractor()
	fileInfo, err := metadataExtractor.GetFileInfo(filePath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: %w", err)
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
	fmt.Printf("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3:\n")
	fmt.Printf("   –§–∞–π–ª: %s\n", filePath)
	fmt.Printf("   –†–∞–∑–º–µ—Ä: %s\n", uploader.FormatFileSize(fileInfo.Size))
	fmt.Printf("   –ë–∞–∫–µ—Ç: %s\n", app.Config.AwsBucketName)
	fmt.Println()

	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	progressChan := make(chan int64)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	go func() {
		startTime := time.Now()

		for {
			select {
			case progress, ok := <-progressChan:
				if !ok {
					return // –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
				}
				if progress > 0 {
					elapsed := time.Since(startTime)
					percentage := float64(progress) / float64(fileInfo.Size) * 100

					// –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
					speed := float64(progress) / elapsed.Seconds()

					// –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
					remainingBytes := fileInfo.Size - progress
					var remainingTime time.Duration
					if speed > 0 {
						remainingTime = time.Duration(float64(remainingBytes)/speed) * time.Second
					}

					// –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
					fmt.Printf("\rüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %.1f%% | –°–∫–æ—Ä–æ—Å—Ç—å: %s/s | –ü—Ä–æ—à–ª–æ: %s | –û—Å—Ç–∞–ª–æ—Å—å: %s",
						percentage,
						uploader.FormatFileSize(int64(speed)),
						uploader.FormatDuration(elapsed),
						uploader.FormatDuration(remainingTime))
				}
			case <-ctx.Done():
				fmt.Printf("\nüö´ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n")
				return
			}
		}
	}()

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	result, err := uploadService.UploadFile(ctx, filePath, func(bytesRead int64) {
		progressChan <- bytesRead
	})

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
	close(progressChan)

	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
	if ctx.Err() != nil {
		return fmt.Errorf("–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞: %w", ctx.Err())
	}

	fmt.Printf("\n‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3!\n")
	fmt.Printf("   URL: %s\n", result.URL)

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	if err := uploadService.UpdateApplicationData(result); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	if err := app.SaveData(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	fmt.Printf("\nüì¶ –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ %s\n", defaultDataFilePath)
	return nil
}
